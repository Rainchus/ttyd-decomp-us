import csv
import os

print("Writing yml to config/symbols.yml...")

#######################################
#1. Convert csv to rough yaml
#######################################
with open('tools/us_symbols.csv', 'r') as csvfile, open('config/symbols.yml.temp', 'w') as outputfile:
    reader = csv.DictReader(csvfile)
    encountered_namespaces = set()
    symbol_counts = {}

    for row in reader:
        ram_addr = row['ram_addr'].split(' ')[0] # Get the first part of ram_addr
        name = row['name']
        namespace = row['namespace']

        # Check if the namespace has been encountered before
        if namespace not in encountered_namespaces:
            if ram_addr and ram_addr.strip() and int(ram_addr, 16) > 0x802BF120:
                # Replace the file extension with .c
                namespace_c = os.path.splitext(namespace)[0] + '.c'
                outputfile.write(f"src/{namespace_c}:\n")
                encountered_namespaces.add(namespace)

        if ram_addr and ram_addr.strip():
            if name in symbol_counts:
                # If the symbol has already been encountered, increment the count and modify the name
                count = symbol_counts[name] + 1
                symbol_counts[name] = count
                name = f"{name}_{count}"
            else:
                # If the symbol has not been encountered before, add it to the symbol_counts dictionary
                symbol_counts[name] = 1
            outputfile.write(f"    0x{ram_addr}: {name}\n")

#######################################
#2. Remove .a from namespaces in csv
#######################################
# Define list of string arrays to remove
remove_strings = ["TRK_MINNOW_DOLPHIN.a ", "Runtime.PPCEABI.H.a ", "os.a ", "MSL_C.PPCEABI.bare.H.a ",
"musyx.a ", "amcstubs.a ", "odenotstub.a ", "OdemuExi2.a ", "base.a ",
"db.a ", "mtx.a ", "dvd.a ", "vi.a ", "demo.a ", "pad.a ", "ai.a ",
"ar.a ", "dsp.a ","card.a ", "gx.a ","exi.a ", "si.a ",
]

forced_types = {
    'TRKExceptionHandler': '0x802611f0',
    'TRKInterruptHandlerEnableInterrupts': '0x80261350'
}

# Open the file and write forced_types, then `global:` header
with open("config/symbols.yml", "w") as output_file:
    output_file.write('# AUTO GENERATED BY csv_to_yaml_symbols.py\n')
    output_file.write('forced_types:\n')
    for function_name, address in forced_types.items():
        output_file.write(f'    {address}: FUNCTION # {function_name}\n')
    output_file.write('\nglobal:\n')

# Open input and output files
with open("config/symbols.yml.temp", "r") as input_file, open("config/symbols.yml", "a") as output_file:
    # Read input file line by line
    for line in input_file:
        # Remove any string arrays in the remove_strings list
        for remove_string in remove_strings:
            line = line.replace(remove_string, "")
        # Check if line contains "0x:"
        if "0x:" in line:
            continue  # Skip this line if it contains "0x:"
        
        # Check if line contains a string from the forced_types list, skip if it does
        if any(forced_type in line for forced_type in forced_types):
            continue
        
        # Write modified line to output file
        output_file.write(line)


# #######################################
# #3. Remove '?' from symbols since ppcdis doens't like symbols starting with it
# #######################################
with open('config/symbols.yml', "r") as file:
    content = file.read()

content = content.replace("?", "")

with open('config/symbols.yml', "w") as file:
    file.write(content)

if os.path.exists('config/symbols.yml.temp'):
    os.remove('config/symbols.yml.temp')


#######################################
#4. Remove named jump tables
#######################################
#if line contains `dat_ptrarr` comment it out (causes issues with ppcdis)
with open('config/symbols.yml', 'r') as f:
    data = f.readlines()

with open('config/symbols.yml', 'w') as f:
    for line in data:
        if 'dat_ptrarr' in line:
            f.write('#' + line)
        else:
            f.write(line)